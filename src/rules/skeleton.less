/// ===== Root =====
/// Every HTML document using Bluelib must define a root, an element where all bluelib styles can start being applied.
/// Elements outside the root won't be styled at all, allowing Bluelib's styling to be contained in components or modules of a website.

@{bluelib} {
    // Get

    // Set the background defined in the palette
    background-color: @hex-background;

    // Set the base color to the foreground defined in the palette
    .bluelib-color(@hex-foreground);
    // By default, text should use the main font
    .font-text();

    /// ===== Macros =====
    /// Less allows defining variables to reduce the amount of boilerplate code to write while defining the rules.
    /// In Bluelib, these are called macros.

    //<editor-fold desc="Rules: Macros">

    @b0: rgba(
            var(--bluelib-color-r),
            var(--bluelib-color-g),
            var(--bluelib-color-b),
            0.025
    );
    @b1: rgba(
            var(--bluelib-color-r),
            var(--bluelib-color-g),
            var(--bluelib-color-b),
            0.100
    );
    @b2: rgba(
            var(--bluelib-color-r),
            var(--bluelib-color-g),
            var(--bluelib-color-b),
            0.200
    );
    @b3: rgba(
            var(--bluelib-color-r),
            var(--bluelib-color-g),
            var(--bluelib-color-b),
            0.300
    );
    @b4: rgba(
            var(--bluelib-color-r),
            var(--bluelib-color-g),
            var(--bluelib-color-b),
            0.400
    );
    @b5: rgba(
            var(--bluelib-color-r),
            var(--bluelib-color-g),
            var(--bluelib-color-b),
            0.500
    );
    @b6: rgba(
            var(--bluelib-color-r),
            var(--bluelib-color-g),
            var(--bluelib-color-b),
            0.600
    );
    @b7: rgba(
            var(--bluelib-color-r),
            var(--bluelib-color-g),
            var(--bluelib-color-b),
            0.700
    );
    @b8: rgba(
            var(--bluelib-color-r),
            var(--bluelib-color-g),
            var(--bluelib-color-b),
            0.800
    );
    @b9: rgba(
            var(--bluelib-color-r),
            var(--bluelib-color-g),
            var(--bluelib-color-b),
            0.900
    );
    @bA: rgba(
            var(--bluelib-color-r),
            var(--bluelib-color-g),
            var(--bluelib-color-b),
            1.000
    );
    @bB: rgba(
            calc(var(--bluelib-color-r) + (var(--bluelib-polarity) * 10)),
            calc(var(--bluelib-color-g) + (var(--bluelib-polarity) * 10)),
            calc(var(--bluelib-color-b) + (var(--bluelib-polarity) * 10)),
            1.000
    );
    @bC: rgba(
            calc(var(--bluelib-color-r) + (var(--bluelib-polarity) * 20)),
            calc(var(--bluelib-color-g) + (var(--bluelib-polarity) * 20)),
            calc(var(--bluelib-color-b) + (var(--bluelib-polarity) * 20)),
            1.000
    );
    @bD: rgba(
            calc(var(--bluelib-color-r) + (var(--bluelib-polarity) * 30)),
            calc(var(--bluelib-color-g) + (var(--bluelib-polarity) * 30)),
            calc(var(--bluelib-color-b) + (var(--bluelib-polarity) * 30)),
            1.000
    );
    @bE: rgba(
            calc(var(--bluelib-color-r) + (var(--bluelib-polarity) * 40)),
            calc(var(--bluelib-color-g) + (var(--bluelib-polarity) * 40)),
            calc(var(--bluelib-color-b) + (var(--bluelib-polarity) * 40)),
            1.000
    );
    @bF: rgba(
            calc(var(--bluelib-color-r) + (var(--bluelib-polarity) * 50)),
            calc(var(--bluelib-color-g) + (var(--bluelib-polarity) * 50)),
            calc(var(--bluelib-color-b) + (var(--bluelib-polarity) * 50)),
            1.000
    );

    @bL: rgba(
            calc(255 * ((var(--bluelib-polarity / 2) * -1) + 0.5)),
            calc(255 * ((var(--bluelib-polarity / 2) * -1) + 0.5)),
            calc(255 * ((var(--bluelib-polarity / 2) * -1) + 0.5)),
            1.000
    );
    @bT: rgba(
            calc(255 * (var(--bluelib-polarity / 2) + 0.5)),
            calc(255 * (var(--bluelib-polarity / 2) + 0.5)),
            calc(255 * (var(--bluelib-polarity / 2) + 0.5)),
            1.000
    );

    //</editor-fold>

    /// ===== All =====
    /// By default, browsers style elements with some weird rules.
    /// This is an attempt to correct them, and to implement some Bluelib magic.

    //<editor-fold desc="Rules: All">

    &, @{all} {

        // Globally set the box-sizing to border-box, as content-box is completely insane
        &, &::before, &::after {
            box-sizing: border-box;
        }

        // Bluelib magic!
        // This rule sets the color of all text to be equal to the current .bluelib-color() at 100% opacity.
        // Thanks, CSS variables!
        color: @bA;

    }

    //</editor-fold>

    /// ===== Layouts =====
    /// Layouts arrange the content displayed inside the root.
    /// Layouts are the second element in the Bluelib hierarchy, immediately following the root.
    /// Ideally, a single layout should be used per page.

    //<editor-fold desc="Rules: Layouts">

    // The base layout class.
    @{layout} {
        display: grid;
        justify-content: stretch;
        align-items: stretch;

        width: 100%;
    }

    // A layout with a single container spanning the whole screen.
    @{layout-fill} {
        padding: 4px;

        grid-template-areas:
            "single";
        grid-template-columns: 1fr;
        grid-template-rows: 1fr;
    }

    @{layout-fill-single} {
        grid-area: single;
    }

    // A layout with a centered 1024px wide main container and two symmetric containers at the sides.
    @{layout-threecol} {
        padding: 4px;

        @media screen and (min-width: 1281px) {
            grid-template-areas:
            "left center right";
            grid-template-columns: 1fr auto 1fr;
            grid-template-rows: 1fr;
        }

        // If the side containers would be smaller than 128px (if the screen is narrower than 1280px), the smaller containers are moved below the main one.
        @media screen and (max-width: 1280px) {
            grid-template-areas:
                "center center"
                "left right";
            grid-template-columns: 1fr 1fr;
            grid-template-rows: auto auto;

            // Keep the container limited to 1024px and centered
            max-width: 1024px;
            margin-left: auto;
            margin-right: auto;
        }
    }

    @{layout-threecol-left} {
        grid-area: left;

        @media screen and (min-width: 1281px) {
            justify-self: end;
        }

        @media screen and (max-width: 1280px) {
            justify-self: stretch;
        }
    }

    @{layout-threecol-center} {
        grid-area: center;

        // Ensure the container doesn't eat up all the space
        max-width: 1024px;
    }

    @{layout-threecol-right} {
        grid-area: right;

        @media screen and (min-width: 1281px) {
            justify-self: start;
        }

        @media screen and (max-width: 1280px) {
            justify-self: stretch;
        }
    }

    //</editor-fold>

    /// ===== Panels =====
    /// Panels are the main sectioning elements available in Bluelib.
    /// Many instance of them should be present on the page!
    /// They should group small amounts of tightly related content, which can be understood more or less separately from the rest of the page.

    //<editor-fold desc="Rules: Panels">

    // The base panel class.
    @{panel} {
        // Panels have a margin to separate them from other elements
        margin: 8px 0;
        // And a padding to separate them from their contents
        padding: 8px;

        // Panels should try to fill the most space possible
        width: 100%;

        background-color: @b0;
        border-color: @b1;

        // The first and last elements of a panel should not have a margin
        > @{all} {
            &:first-child {
                margin-top: 0;
            }

            &:last-child {
                margin-bottom: 0;
            }
        }
    }

    // A panel which encloses its contents with a border.
    @{panel-box} {
        border-radius: 4px;
        border-width: 2px;
        border-style: solid;
    }

    // A panel which encloses its contents with a quote-like border.
    @{panel-blockquote} {
        border-radius: 4px;
        border-width: 0 0 0 2px;
        border-style: solid;
    }

    // A panel with no border whose contents are made smaller.
    @{panel-aside} {
        border-width: 0;
        font-size: smaller;
    }

    //</editor-fold>

    /// ===== Splits =====
    /// A split is an element which splits everything contained inside in multiple columns of equal width.

    //<editor-fold desc="Rules: Splits">

    @{split} {
        display: flex;
        flex-wrap: wrap;
        gap: 4px 8px;
        justify-content: center;

        > @{panel} {
            // Add a horizontal margin to panels
            margin: 0;
        }

        // Allow contained elements to grow
        > @{all} {
            flex-grow: 1;
            flex-shrink: 0;
            flex-basis: 0;
        }
    }

    // Force a split to wrap
    @{split-forcewrap} {
        flex-grow: 0;
        flex-shrink: 0;
        flex-basis: 100%;
    }

    //</editor-fold>

    /// ===== Separators =====
    /// Separators are horizontal lines separating elements.

    //<editor-fold desc="Rules: Separators">

    @{separator} {
        border-width: 1px;
        border-style: solid;
        border-color: @b5;
    }

    @{separator-light} {
        border-color: @b1;
    }

    @{separator-heavy} {
        border-color: @bA;
    }

    //</editor-fold>

    /// ===== Images =====
    /// Images are changed to block elements and are automatically centered.

    //<editor-fold desc="Rules: Images">

    @{image} {
        display: block;

        max-width: 100%;

        margin-left: auto;
        margin-right: auto;

        object-fit: contain;
    }

    @{image-limit-half} {
        max-height: max(28.2vw, 50vh);
    }

    @{image-limit-quarter} {
        max-height: max(14.1vw, 25vh);
    }

    //</editor-fold>

    /// ===== Status =====
    /// Status are classes that can be applied to elements to indicate that special interactions are available.

    //<editor-fold desc="Rules: Status">

    @{status-disabled} {
        opacity: 50%;

        // All sub-elements of a disabled element should have a not-allowed cursor
        &, @{all} {
            cursor: not-allowed !important;
        }
    }

    //</editor-fold>

    /// ===== Inputs =====
    /// Inputs are the interactable parts of a website.

    //<editor-fold desc="Rules: Inputs">

    @{input} {
        // Disable the browser font override
        font: inherit;

        // They should have a solid border
        border-style: solid;
        // Unless they are disabled, then they should have a dashed one
        &@{status-disabled} {
            border-style: dashed;
        }

        // They should use the current bluelib color
        border-color: @b3;
        color: @bA;
        background-color: @b0;

        // Both for themselves and their placeholder
        &::placeholder {
            color: @b4;
            opacity: 1;
        }

        // They should become lighter if hovered
        &:hover {
            border-color: @b6;
            color: @bC;
            background-color: @b1;

            &::placeholder {
                color: @b7;
            }
        }

        // And even lighter if focused
        &:focus {
            border-color: @bA;
            color: @bF;
            background-color: @b2;

            &::placeholder {
                color: @b7;
            }
        }

        // Unless they are disabled
        &@{status-disabled} {
            &:hover, &:focus {
                border-color: @b3;
                color: @bA;
                background-color: @b0;

                &::placeholder {
                    color: @b4;
                }
            }
        }

        // If they are optional, their contents should be in italic
        &:optional, &:optional::placeholder {
            font-style: italic;
        }

        // Color the elements based on validation
        // Temporarily disabled due to some browser quirks
        // &:invalid {
        //     .bluelib-color(@hex-red);
        // }
        // &:valid {
        //     .bluelib-color(@hex-lime)
        // }

        // If the browser wants the focus to be more appearent, don't draw an ugly focus ring and let every element define a better way
        &:focus-visible {
            outline: none;
        }
    }

    /// Fields are inputs where text can be entered
    @{input-field} {
        cursor: text;

        border-width: 0 0 2px 0;
        border-radius: 4px 4px 0 0;
        padding: 6px;
    }

    /// Selects are inputs where one option between many can be selected
    @{input-select} {
        cursor: context-menu;

        border-width: 0 0 2px 0;
        border-radius: 4px 4px 0 0;

        @media screen and (-webkit-min-device-pixel-ratio:0) {
            @{input-option}, @{input-optgroup} {
                background-color: @hex-background;
            }
        }
    }

    /// Multiselects are inputs where multiple options between many can be selected
    @{input-multiselect} {
        cursor: vertical-text;

        border-width: 0 0 0 2px;
        border-radius: 0 4px 4px 0;

        // This is how you change color of the selected options of the multiselect
        // But it is very quirky and never works as expected, so it is disabled
        // @{input-option} {
        //     &:checked {
        //         background-image: linear-gradient(0deg, @bA 0%, @bA 100%);
        //     }
        // }
    }

    // Some rules apply to both of them
    @{input-select}, @{input-multiselect} {
        // Browsers add 4px of unremovable horizontal padding to options for some reason
        padding: 6px 4px;

        @{input-option} {
            font-weight: normal;
            color: @bA;

            // Options should be slightly padded too
            padding: 4px;
        }

        @{input-optgroup} {
            // Style option groups as titles
            font-weight: bold;
            color: @hex-accent;

            // Options groups should be slightly padded too
            padding: 4px;

            @{input-option} {
                // Add a slight indentation
                padding: 4px 20px;

                &::before {
                    // Remove the tabs that Chrome adds before the options
                    content: "";
                }
            }
        }

        // Nested optgroups aren't allowed by browsers, so no need to worry about that
    }

    @{input-button} {
        cursor: pointer;

        // Buttons are rendered as inline elements, but should arrange their contents as if they were flex
        display: inline-flex;
        // Center the button contents both vertically and horizontally
        justify-content: center;
        align-items: center;

        // Give the button a nice shape
        padding: 6px 16px;
        border-radius: 4px;

        // Give them a good clicking feedback
        // (sadly it doesn't work if using the keyboard)
        &:active {
            border-color: @bC;
            color: @bF;
            background-color: @b3;
        }

        // But not if they're disabled
        @{status-disabled} {
            &:active {
                border-color: @b3;
                color: @bA;
                background-color: @b0;
            }
        }
    }

    @{input-checkbox}, @{input-radio} {
        // Disable the default browser style
        appearance: none;

        // Make the element feel clickable
        cursor: pointer;

        // Set a fixed size
        width: 24px;
        height: 24px;

        // Override the default border width
        border-width: 2px;

        // Prepare the element to display something inside
        display: inline-flex;
        justify-content: center;
        align-items: center;

        &::before {
            // Force the creation of a pseudo-element inside
            display: block;
            content: "";

            width: 14px;
            height: 14px;
        }

        // If the element is checked, display it
        &:checked::before {
            background-color: @b9;
        }

        &:hover:checked::before {
            background-color: @bB;
        }

        &:focus:checked::before {
            background-color: @bD;
        }

        &:active:checked::before {
            background-color: @bD;
        }
    }

    // Checkbox buttons denote that multiple options can be selected
    @{input-checkbox} {
        // Checkboxes should be square
        border-radius: 4px;

        &::before {
            border-radius: 2px;
        }
    }

    // Radio buttons denote that only an option can be selected
    @{input-radio} {
        // Radios should be round
        border-radius: 100%;

        &::before {
            border-radius: 100%;
        }
    }

    //</editor-fold>

    /// ===== Forms =====
    /// Forms are containers where interactable elements are contained.
    /// Every interactable is split in two parts: a label on the left and the control on the right.
    ///
    /// Example:
    ///
    /// Username | Steffo
    ///    Email | ste.pigozzi@gmail.com
    /// Password | ············
    ///  Country | Italy ↓
    ///
    ///      [Submit]

    //<editor-fold desc="Rules: Forms">

    @{form} {
        display: grid;

        align-items: center;
        row-gap: 4px;
        column-gap: 8px;

        // Labels should have the greater width between the one they require and 1/6 of the form width.
        grid-template-columns: minmax(auto, 1fr) 5fr;

        @{form-label} {
            // Labels are on the left column of the grid
            grid-column: 1;
            // They should be right-aligned
            justify-self: end;
            text-align: right;

            // Give the labels the accent color
            .bluelib-color(@hex-accent);
            // And make them slightly bold
            font-weight: 500;
        }


        @{form-input} {
            // Inputs are on the right column of the grid
            grid-column: 2;
            // They should occupy all the available space
            justify-self: stretch;
            width: 100%;
        }

        // Groups are similar to form-inputs, but may contain multiple inputs inside them
        @{form-group} {
            grid-column: 2;

            display: flex;
            gap: 8px 16px;
            justify-content: space-evenly;
            align-items: center;
            flex-wrap: wrap;
            width: 100%;

            background-color: @b0;
            padding: 6px;
            border-radius: 4px;

            @{form-group-label} {
                display: flex;
                gap: 6px;
                justify-content: center;
                align-items: center;

                // Align text to the left
                text-align: left;
            }

            @{form-group-row} {
                flex-basis: 100%;

                justify-content: start;
            }
        }

        // An element filling a whole row of a form
        // Useful for adding buttons or similar flow interruptions
        @{form-row} {
            grid-column-start: 1;
            grid-column-end: 3;

            display: flex;
            gap: 8px;
            justify-content: center;
            align-items: center;
            width: 100%;

            margin-top: 8px;
            margin-bottom: 8px;
        }
    }

    //</editor-fold>

    // --- Elements ---

    @{element-title} {
        text-align: center;
        .bluelib-color(@hex-accent);
        .font-title();
    }

    @{element-paragraph} {

    }

    @{element-list-item} {
        margin: 10px 0;
    }

    @{element-anchor} {
        .bluelib-color(@hex-link);
        text-decoration-line: underline;
        text-decoration-style: solid;
        text-decoration-color: currentColor;
        text-decoration-thickness: 1px;

        &:hover, &:focus {
            .bluelib-color(@hex-link-hover);
        }

        &:focus-visible {
            text-decoration-thickness: 2px;
        }

        &:active {
            .bluelib-color(@hex-link-active);
        }

        &@{status-disabled} {
            text-decoration-style: dashed;

            &:hover, &:focus {
                .bluelib-color(@hex-link);
            }

            &:active {
                .bluelib-color(@hex-link);
            }
        }
    }

    // --- Alignment ---

    @{align-left} {
        text-align: left;
    }

    @{align-center} {
        text-align: center;
    }

    @{align-right} {
        text-align: right;
    }

    // --- Sizes ---

    @{size-xxl} {
        font-size: xx-large;
    }

    @{size-xl} {
        font-size: x-large;
    }

    @{size-l} {
        font-size: large;
    }

    @{size-m} {
        font-size: medium;
    }

    @{size-s} {
        font-size: small;
    }

    @{size-xs} {
        font-size: x-small;
    }

    @{size-xxs} {
        font-size: xx-small;
    }

    // --- Styles ---

    @{style-bold} {
        font-weight: bold;
        .bluelib-color(@hex-accent);
    }

    @{style-italic} {
        font-style: italic;
    }

    @{style-underline} {
        text-decoration-line: underline;
    }

    @{style-strike} {
        text-decoration-line: line-through;
    }

    @{style-monospace} {
        .font-code();
    }

    @{style-keyboard} {
        .font-code();
        padding: 2px 4px;
        border: 2px outset;
        border-radius: 4px;
    }

    // --- Colors ---

    @{color-red} {
        .bluelib-color(@hex-red)
    }

    @{color-orange} {
        .bluelib-color(@hex-orange)
    }

    @{color-yellow} {
        .bluelib-color(@hex-yellow)
    }

    @{color-lime} {
        .bluelib-color(@hex-lime)
    }

    @{color-cyan} {
        .bluelib-color(@hex-cyan)
    }

    @{color-blue} {
        .bluelib-color(@hex-blue)
    }

    @{color-magenta} {
        .bluelib-color(@hex-magenta)
    }

    @{color-gray} {
        .bluelib-color(@hex-gray)
    }
}

