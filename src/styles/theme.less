@import "constants.less";
@import "mixins.less";

.bluelib {
    background-color: @bg;
    color: @fg;
    font-family: @sans;

    * {
        box-sizing: border-box;
    }

    h1, h2, h3, h4, h5, h6 {
        margin-top: 4px;
        margin-bottom: 4px;
        color: @accent;
        font-family: @title;
        font-weight: normal;
        text-align: center;
    }

    // By default h1 are as large as h2
    h1 {
        font-size: xx-large;
    }

    a {
        color: @link;
        text-decoration: none;

        &:hover {
            color: @linkhover;
        }

        &:active {
            color: @linkactive;
        }
    }

    img, iframe {
        max-width: 100%;
        max-height: 300px;
        border-radius: 4px;
    }

    pre, code {
        font-family: @mono;
        font-size: 14px;
    }

    blockquote {
        color: @fg;
        border-left: 3px solid @plusplusplusplus;
        background-color: @plus;
        padding: 4px 4px 4px 8px;
        margin: 8px 0;
    }

    input[type="text"], input[type="password"] {
        .hb(@fg; @bg);

        border-radius: 4px;
        padding: 4px;
        font-size: medium;
    }

    button {
        .hh(@fg, @bg);

        border-radius: 4px;
        padding: 4px;
        font-size: medium;
    }

    .ok {
        color: @okfg;

        input[type="text"]&, input[type="password"]&, input[type="text"], input[type="password"] {
            .hb(@okfg; @okbg);
        }

        &button, button {
            .hh(@okfg, @okbg);
        }
    }

    .warning {
        color: @warningfg;

        input[type="text"]&, input[type="password"]&, input[type="text"], input[type="password"] {
            .hb(@warningfg; @warningbg);
        }

        button&, button {
            .hh(@warningfg, @warningbg);
        }
    }

    .error {
        color: @errorfg;

        input[type="text"]&, input[type="password"]&, input[type="text"], input[type="password"] {
            .hb(@errorfg; @errorbg);
        }

        button&, button {
            .hh(@errorfg; @errorbg);
        }
    }

    .disabled, :disabled, [disabled] {
        color: @disabledfg;
        cursor: not-allowed;

        input[type="text"]&, input[type="password"]&, input[type="text"], input[type="password"] {
            .hb(@disabledfg; @disabledbg);
        }

        button&, button {
            .hnh(@disabledfg, @disabledbg);
        }
    }

    hr {
        border: 1px solid @plusplusplusplus;
        margin-top: 24px;
        margin-bottom: 24px;
    }

    table {
        border-spacing: 0;
        border: 2px solid @plusplus;
        background-color: @plus;
        border-collapse: collapse;

        thead, tbody {
            th, td {
                padding: 4px;
                border: 1px solid @plusplus;
            }
        }

        thead {
            background-color: @plusplus;
            color: @accent;
        }
    }

    li {
        margin: 10px 0;
    }

    b {
        color: @accent;
    }

    abbr[title] {
        cursor: help;
    }

    aside {
        margin: 4px 0;
        padding: 4px;
        font-size: smaller;
        background-color: @plus;
        border-radius: 4px;
    }
}
